[user]
  name = Ben Lu
  email = ayroblu@gmail.com
[merge]
  tool = vimdiff
[color]
  ui = true
[alias]
  # To checkout a file from another branch, git co <branch> -- file
  # To show a file from another branch, git show <branch>:file
  #
  # https://stackoverflow.com/questions/5188320/how-can-i-get-a-list-of-git-branches-ordered-by-most-recent-commit
  b = for-each-ref --sort=committerdate refs/heads/ --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(color:red)%(objectname:short)%(color:reset) - %(contents:subject) - %(authorname) (%(color:green)%(committerdate:relative)%(color:reset))'
  # Include remote branches
  bo = for-each-ref --sort=committerdate refs/heads/ refs/remotes/origin/ --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(color:red)%(objectname:short)%(color:reset) - %(contents:subject) - %(authorname) (%(color:green)%(committerdate:relative)%(color:reset))'
  # bo no formatting (for deleting old ones
  boq = for-each-ref --sort=committerdate refs/remotes/origin/ --format='%(refname:lstrip=-1)'
  # Local branches
  bl = log --branches --oneline --no-walk --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr - %cd) %C(bold blue)<%an>%Creset'
  bs = !git for-each-ref --sort=-committerdate refs/heads/ --format='%(refname:short)' | fzf --no-sort | xargs git co
  # All remote branches
  blo = !git for-each-ref --sort=committerdate refs/heads/ refs/remotes/origin/ --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(color:red)%(objectname:short)%(color:reset) - %(contents:subject) - %(authorname) (%(color:green)%(committerdate:relative)%(color:reset))'
  # To clean everything
  cfd = clean -fd
  ci = commit -am
  cim = commit -m
  co = checkout
  # git cherry-pick A^..B # A to B inclusive
  # git cod 'Dec 25 2018'
  cod = !"f() { echo git checkout `git rev-list -1 --before=\"$1\" --first-parent master`; }; f"
  d = diff
  ds = diff --staged
  dh = diff HEAD
  dt = difftool
  dw = d --color-words
  dc = d --color-words=.
  # Chain things on to this
  f = !git status -s | sed s/^...// | fzf -m
  fco = !git f | xargs git co
  fadd = !git f | xargs git add
  fcp = !git f | pbcopy
  lbase = log --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr - %cd) %C(bold blue)<%an>%Creset'
  l = lbase --graph -500
  ls = l --stat
  ll = ls -10 -U0
  la = lbase --all
  laa = lbase --all --author-date-order --author='Ben Lu'
  lf = l --first-parent
  lfs = l --first-parent --stat
  # -c shows merge commit diff too
  lfsc = l -c --first-parent --stat
  llfsc = ll -c --first-parent --stat
  #lfa = lf --author-date-order  --no-merges
  m = merge --no-ff
  md = diff master...HEAD
  mt = mergetool
  p = push origin HEAD
  # Removes deleted branches from cache: https://stackoverflow.com/questions/32147093/git-delete-remotes-remote-refs-do-not-exist
  pbranch = fetch -p origin
  pf = push -f origin HEAD
  pt = push --tags origin HEAD
  pu = push -u origin HEAD
  s = status
  si = status --ignored
  tc = rev-list -n 1
  # From https://stackoverflow.com/questions/8475448/find-merge-commit-which-include-a-specific-commit
  find-merge = "!sh -c 'commit=$0 && branch=${1:-HEAD} && (git rev-list $commit..$branch --ancestry-path | cat -n; git rev-list $commit..$branch --first-parent | cat -n) | sort -k2 -s | uniq -f1 -d | sort -n | tail -1 | cut -f2'"
  show-merge = "!sh -c 'merge=$(git find-merge $0 $1) && [ -n \"$merge\" ] && git show $merge'"

  # Delete old branches
  dell = "!git branch --merged | egrep -v '(^\\*|master|dev)' | xargs git branch -d"
  delo = "!git branch -r --merged | grep -v master | sed 's/origin\\///' | xargs git push --delete origin"

[core]
  pager = less -+$LESS -R
  excludesfile = ~/.gitignore_global
[push]
  default = matching

# git reset HEAD~
# git push -f origin HEAD^:master
[filter "lfs"]
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  process = git-lfs filter-process
  required = true
[diff]
  tool = vimdiff
[mergetool]
  keepBackup = false
[rerere]
  enabled = true
[fetch]
  prune = true
